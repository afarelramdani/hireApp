 updatePatchAccount: async (req, res) => {
    try {
      const { accountId } = req.params

      const {
        ac_name = '',
        ac_email = '',
        ac_no_hp = '',
        ac_password = '',
        ac_level = ''
      } = req.body
      if (ac_name.trim() || ac_email.trim() || ac_no_hp.trim() || ac_password.trim() || ac_level.trim()) {
        const result = await getAccountByIdModel(accountId)
        if (result.length) {
          const dataColumn = Object.entries(req.body).map(item => {
            console.log(item[0])
            // untuk melihat value akhir apakah int atau string, jika int maka tanpa kutip, jika string maka kutip
            const queryDynamic = parseInt(item[1]) > 0 ? `${item[0] = item[1]}` : `${item[0]} = '${item[1]}'`
            return queryDynamic
          })
          const result = await updatePatchAccountModel(accountId, dataColumn)
          if (result.affectedRows) {
            res.status(200).send({
              succes: true,
              message: 'Data Berhasil Di Update'
            })
          } else {
            res.status(400).send({
              succes: true,
              message: 'Failed To update Data '
            })
          }
        } else {
          res.status(404).send({
            succes: true,
            message: `Proejct with id ${accountId} not Found `
          })
        }
      } else {
        res.status(400).send({
          succes: true,
          message: 'Some Field must be filled'
        })
      }
    } catch (error) {
      res.status(500).send({
        success: false,
        message: 'Internal server error!'
      })
    }
  }


  //

    // updatePatchAccountModel: (accountId, dataColumn) => {
  //   return new Promise((resolve, reject) => {
  //     const db = `UPDATE account SET ${dataColumn} WHERE ac_id = ${accountId}`
  //     db.query(db, (err, result, _fields) => {
  //       if (!err) {
  //         resolve(result)
  //       } else {
  //         reject(new Error(err))
  //       }
  //     })
  //   })
  // }
